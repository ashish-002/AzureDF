{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Alpha-ETL"
		},
		"LS_Sink_Copy_Activity_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_Sink_Copy_Activity'"
		},
		"LS_TickerData_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LS_TickerData'"
		},
		"Alpha API Connect_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.alphavantage.co/query?function=NEWS_SENTIMENT&tickers=IBM&apikey=MLM2BRQZ9PL2JJ9J&time_from=20180101T0130&time_to=20231231T0130&limit=1000"
		},
		"LS_Sink_Copy_Activity_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://alphadatastore.dfs.core.windows.net/"
		},
		"LS_TickerData_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://alphadatastore.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AlphaETLPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Ticker",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "TickerData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Alpha API Setup",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Lookup Ticker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://www.alphavantage.co/query?function=NEWS_SENTIMENT&tickers=IBM&apikey=MLM2BRQZ9PL2JJ9J&time_from=20180101T0130&time_to=20231231T0130&limit=1000"
						}
					},
					{
						"name": "ForEach Ticker Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Alpha API Setup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Ticker').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data from API",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"requestBody": {
													"value": "@concat(\n    'https://www.alphavantage.co/query?function=NEWS_SENTIMENT&tickers=',item().Tickername,'&apikey=MLM2BRQZ9PL2JJ9J&time_from=20180101T0130&time_to=20231231T0130&limit=1000'\n)",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "JSON_ForEach_Copy",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Sink_Output",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Data flow for JSON Output",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Copy data from API",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "JSONDataflow",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"JSONSource": {},
												"SinkforJSONOutput": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-02-17T12:55:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TickerData')]",
				"[concat(variables('factoryId'), '/datasets/JSON_ForEach_Copy')]",
				"[concat(variables('factoryId'), '/datasets/Sink_Output')]",
				"[concat(variables('factoryId'), '/dataflows/JSONDataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSON_ForEach_Copy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Alpha API Connect",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Alpha API Connect')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink_Output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Sink_Copy_Activity",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "jsonoutput",
						"fileSystem": "outputdata"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Sink_Copy_Activity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TickerData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_TickerData",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Ticker_List.csv",
						"folderPath": "raw_data",
						"fileSystem": "rawdatastore"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_TickerData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Alpha API Connect')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('Alpha API Connect_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Sink_Copy_Activity')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_Sink_Copy_Activity_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_Sink_Copy_Activity_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_TickerData')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LS_TickerData_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LS_TickerData_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSONDataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Sink_Output",
								"type": "DatasetReference"
							},
							"name": "JSONSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Sink_Output",
								"type": "DatasetReference"
							},
							"name": "SinkforJSONOutput"
						}
					],
					"transformations": [
						{
							"name": "flattenJSON"
						}
					],
					"scriptLines": [
						"source(output(",
						"          feed as (authors as string[], banner_image as string, category_within_source as string, overall_sentiment_label as string, overall_sentiment_score as double, source as string, source_domain as string, summary as string, ticker_sentiment as (relevance_score as double, ticker as string, ticker_sentiment_label as string, ticker_sentiment_score as double)[], time_published as string, title as string, topics as (relevance_score as double, topic as string)[], url as string)[],",
						"          items as short,",
						"          relevance_score_definition as string,",
						"          sentiment_score_definition as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'arrayOfDocuments') ~> JSONSource",
						"JSONSource foldDown(unrollMultiple(feed.authors,feed.ticker_sentiment,feed.topics),",
						"     mapColumn(",
						"          authors = feed.authors,",
						"          banner_image = feed.banner_image,",
						"          category_within_source = feed.category_within_source,",
						"          overall_sentiment_label = feed.overall_sentiment_label,",
						"          overall_sentiment_score = feed.overall_sentiment_score,",
						"          source = feed.source,",
						"          source_domain = feed.source_domain,",
						"          summary = feed.summary,",
						"          ticker_sentiment = feed.ticker_sentiment,",
						"          ticker_relevance_score = feed.ticker_sentiment.relevance_score,",
						"          ticker = feed.ticker_sentiment.ticker,",
						"          ticker_sentiment_label = feed.ticker_sentiment.ticker_sentiment_label,",
						"          ticker_sentiment_score = feed.ticker_sentiment.ticker_sentiment_score,",
						"          time_published = feed.time_published,",
						"          title = feed.title,",
						"          relevance_score = feed.topics.relevance_score,",
						"          topic = feed.topics.topic,",
						"          url = feed.url,",
						"          items,",
						"          relevance_score_definition,",
						"          sentiment_score_definition",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenJSON",
						"flattenJSON sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SinkforJSONOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sink_Output')]"
			]
		}
	]
}